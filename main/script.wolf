
// #1
// Specialized overload for 2 ints
function test_func(a int, b int)
{
	print("#1 Overload ");
	print(a + b + "\n");
}

// #2
// Generic overload (no specified type). This is chosen if
// all other overloads don't work.
function test_func(a)
{
	print("#2 Overload ");
	print(a + "\n");
}

// #3
// Specialized overload of a single string
function test_func(const a string)
{
	print("#3 Overload ");
	print(a + "\n");
}

{
	print ("While: ");
	const limit = 34;
	var i = 0;
	while (i < limit)
	{
		print (i + " ");
		i += 1;
	}
	print("\n");
}
test_func(1, 1);      // #1
test_func(34);        // #2
test_func("eeeey\n"); // #3

const str = "eeeyy";

// Create empty string
var str = string();
// = operator overload to assign string type
str = "eeey";
// Method calling
str.myfunc();

"pie".myfunc();

print("pie" + string("a"));

for (var i = 0; i < 10; i += 1)
{
	print(i + " ");
}
print("\n");

for (var i = 0; i < 10; i += 1)
{
	print(i+ " ");
	if (i >= 3)
		break;
}
print("\n");

for (var i = 0; i < 10; i += 1)
{
	if (i == 5)
		continue;
	print(i+ " ");
}
print("\n");

{ // Test infinite loop with break
	var for_iters = 0;
	for (;;)
	{
		for_iters += 1;
		if (for_iters > 10)
			break;
	}
	print(for_iters + "\n"); // Should be 11
}

function afunc(this string)
{
	return print("hi " + this + "\n");
}

string("lol").afunc;



